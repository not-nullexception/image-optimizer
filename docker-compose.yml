version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: image-optimizer-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: image_optimizer
    ports:
      - "5432:5432"
    profiles: ["dev", "prod"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - image-optimizer-network

  # MinIO Storage
  minio:
    image: minio/minio:RELEASE.2025-04-03T14-56-28Z
    container_name: image-optimizer-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    profiles: ["dev", "prod"]
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - image-optimizer-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: image-optimizer-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    profiles: ["dev", "prod"]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - image-optimizer-network

  # Database migrations
  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    container_name: image-optimizer-migrations
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: image_optimizer
      DB_SSL_MODE: disable
    profiles: ["dev", "prod"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - image-optimizer-network

  # API Server
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: image-optimizer-api
    environment:
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      GIN_MODE: release
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: image_optimizer
      DB_SSL_MODE: disable
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: images
      MINIO_SSL: 'false'
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      TRACING_ENABLED: 'true'
      TRACING_OTLP_ENDPOINT: 'otel-collector:4317'
      TRACING_SERVICE_NAME: 'image-optimizer-api'
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    profiles: ["prod"]
    networks:
      - image-optimizer-network

  # Worker service
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: image-optimizer-worker
    profiles: [ "prod" ]
    ports:
      - "9091:9091"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: image_optimizer
      DB_SSL_MODE: disable
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: images
      MINIO_SSL: 'false'
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      WORKER_COUNT: 4
      MAX_WORKERS: 10
      WORKER_METRICS_PORT: '9091'
      LOG_LEVEL: info
      TRACING_ENABLED: 'true'
      TRACING_OTLP_ENDPOINT: 'otel-collector:4317'
      TRACING_SERVICE_NAME: 'image-optimizer-worker'
      TRACING_SERVICE_VERSION: '1.0.0'
      TRACING_ENVIRONMENT: 'production'
      METRICS_ENABLED: 'true'
      # METRICS_PORT: 9091 # Poderia configurar a porta aqui e ler no main.go
    depends_on: # Opcional, mas recomendado
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - image-optimizer-network

  # Tempo
  tempo:
    image: grafana/tempo:2.7.2
    container_name: image-optimizer-tempo
    command: ["-config.file=/etc/tempo/tempo-config.yaml"]
    volumes:
      - ./docker/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"  # tempo
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
    profiles: ["prod"]
    networks:
      - image-optimizer-network
    labels:
      com.docker.compose.project: image-optimizer

    # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.123.0
    container_name: image-optimizer-otel-collector
    command: ["--config=/etc/otel-collector/config.yaml"]
    volumes:
      - ./docker/otel-collector/config.yaml:/etc/otel-collector/config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC receiver
      - "4318:4318"  # OTLP HTTP receiver
      - "8889:8889"  # Prometheus exporter
      - "8888:8888"  # Metrics endpoint
    profiles: ["prod"]
    depends_on:
      - tempo
    networks:
      - image-optimizer-network
    labels:
      com.docker.compose.project: image-optimizer

   # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: image-optimizer-prometheus
    ports:
      - "9090:9090"
    profiles: ["prod"]
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - image-optimizer-network
    labels:
      com.docker.compose.project: image-optimizer

   # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.14
    container_name: image-optimizer-loki
    ports:
      - "3100:3100"
    profiles: ["prod"]
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - image-optimizer-network
    labels:
      com.docker.compose.project: image-optimizer

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.14
    container_name: image-optimizer-promtail
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    profiles: ["prod"]
    depends_on:
      - loki
    networks:
      - image-optimizer-network
    labels:
      com.docker.compose.project: image-optimizer

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:11.6.0
    container_name: image-optimizer-grafana
    ports:
      - "3000:3000"
    profiles: ["prod"]
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - image-optimizer-network
    labels:
      com.docker.compose.project: image-optimizer

volumes:
  postgres_data:
  minio_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data:
  
networks:
  image-optimizer-network:
    driver: bridge