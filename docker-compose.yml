version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: image-optimizer-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: image_optimizer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - image-optimizer-network

  # MinIO Storage
  minio:
    image: minio/minio:RELEASE.2025-04-03T14-56-28Z
    container_name: image-optimizer-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - image-optimizer-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: image-optimizer-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    networks:
      - image-optimizer-network

  # Database migrations
  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    container_name: image-optimizer-migrations
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: image_optimizer
      DB_SSL_MODE: disable
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - image-optimizer-network

  # API Server
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: image-optimizer-api
    environment:
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      GIN_MODE: release
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: image_optimizer
      DB_SSL_MODE: disable
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: images
      MINIO_SSL: 'false'
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    networks:
      - image-optimizer-network

  # Worker service
  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    container_name: image-optimizer-worker
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: image_optimizer
      DB_SSL_MODE: disable
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: images
      MINIO_SSL: 'false'
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      WORKER_COUNT: 4
      MAX_WORKERS: 10
      LOG_LEVEL: info
    networks:
      - image-optimizer-network

volumes:
  postgres_data:
  minio_data:
  rabbitmq_data:

networks:
  image-optimizer-network:
    driver: bridge